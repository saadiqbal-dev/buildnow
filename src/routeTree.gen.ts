/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as PricingRouteImport } from './routes/pricing'
import { Route as IntegrationsRouteImport } from './routes/integrations'
import { Route as CompanyRouteImport } from './routes/company'
import { Route as PlatformRouteRouteImport } from './routes/platform/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as PlatformIndexRouteImport } from './routes/platform/index'
import { Route as PlatformVideoGenerationRouteImport } from './routes/platform/video-generation'
import { Route as PlatformAiTrainerRouteImport } from './routes/platform/ai-trainer'
import { Route as PlatformAiPhoneAgentRouteImport } from './routes/platform/ai-phone-agent'
import { Route as IndustriesUtilitiesRouteImport } from './routes/industries/utilities'

const PricingRoute = PricingRouteImport.update({
  id: '/pricing',
  path: '/pricing',
  getParentRoute: () => rootRouteImport,
} as any)
const IntegrationsRoute = IntegrationsRouteImport.update({
  id: '/integrations',
  path: '/integrations',
  getParentRoute: () => rootRouteImport,
} as any)
const CompanyRoute = CompanyRouteImport.update({
  id: '/company',
  path: '/company',
  getParentRoute: () => rootRouteImport,
} as any)
const PlatformRouteRoute = PlatformRouteRouteImport.update({
  id: '/platform',
  path: '/platform',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const PlatformIndexRoute = PlatformIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => PlatformRouteRoute,
} as any)
const PlatformVideoGenerationRoute = PlatformVideoGenerationRouteImport.update({
  id: '/video-generation',
  path: '/video-generation',
  getParentRoute: () => PlatformRouteRoute,
} as any)
const PlatformAiTrainerRoute = PlatformAiTrainerRouteImport.update({
  id: '/ai-trainer',
  path: '/ai-trainer',
  getParentRoute: () => PlatformRouteRoute,
} as any)
const PlatformAiPhoneAgentRoute = PlatformAiPhoneAgentRouteImport.update({
  id: '/ai-phone-agent',
  path: '/ai-phone-agent',
  getParentRoute: () => PlatformRouteRoute,
} as any)
const IndustriesUtilitiesRoute = IndustriesUtilitiesRouteImport.update({
  id: '/industries/utilities',
  path: '/industries/utilities',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/platform': typeof PlatformRouteRouteWithChildren
  '/company': typeof CompanyRoute
  '/integrations': typeof IntegrationsRoute
  '/pricing': typeof PricingRoute
  '/industries/utilities': typeof IndustriesUtilitiesRoute
  '/platform/ai-phone-agent': typeof PlatformAiPhoneAgentRoute
  '/platform/ai-trainer': typeof PlatformAiTrainerRoute
  '/platform/video-generation': typeof PlatformVideoGenerationRoute
  '/platform/': typeof PlatformIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/company': typeof CompanyRoute
  '/integrations': typeof IntegrationsRoute
  '/pricing': typeof PricingRoute
  '/industries/utilities': typeof IndustriesUtilitiesRoute
  '/platform/ai-phone-agent': typeof PlatformAiPhoneAgentRoute
  '/platform/ai-trainer': typeof PlatformAiTrainerRoute
  '/platform/video-generation': typeof PlatformVideoGenerationRoute
  '/platform': typeof PlatformIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/platform': typeof PlatformRouteRouteWithChildren
  '/company': typeof CompanyRoute
  '/integrations': typeof IntegrationsRoute
  '/pricing': typeof PricingRoute
  '/industries/utilities': typeof IndustriesUtilitiesRoute
  '/platform/ai-phone-agent': typeof PlatformAiPhoneAgentRoute
  '/platform/ai-trainer': typeof PlatformAiTrainerRoute
  '/platform/video-generation': typeof PlatformVideoGenerationRoute
  '/platform/': typeof PlatformIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/platform'
    | '/company'
    | '/integrations'
    | '/pricing'
    | '/industries/utilities'
    | '/platform/ai-phone-agent'
    | '/platform/ai-trainer'
    | '/platform/video-generation'
    | '/platform/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/company'
    | '/integrations'
    | '/pricing'
    | '/industries/utilities'
    | '/platform/ai-phone-agent'
    | '/platform/ai-trainer'
    | '/platform/video-generation'
    | '/platform'
  id:
    | '__root__'
    | '/'
    | '/platform'
    | '/company'
    | '/integrations'
    | '/pricing'
    | '/industries/utilities'
    | '/platform/ai-phone-agent'
    | '/platform/ai-trainer'
    | '/platform/video-generation'
    | '/platform/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  PlatformRouteRoute: typeof PlatformRouteRouteWithChildren
  CompanyRoute: typeof CompanyRoute
  IntegrationsRoute: typeof IntegrationsRoute
  PricingRoute: typeof PricingRoute
  IndustriesUtilitiesRoute: typeof IndustriesUtilitiesRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/pricing': {
      id: '/pricing'
      path: '/pricing'
      fullPath: '/pricing'
      preLoaderRoute: typeof PricingRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/integrations': {
      id: '/integrations'
      path: '/integrations'
      fullPath: '/integrations'
      preLoaderRoute: typeof IntegrationsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/company': {
      id: '/company'
      path: '/company'
      fullPath: '/company'
      preLoaderRoute: typeof CompanyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/platform': {
      id: '/platform'
      path: '/platform'
      fullPath: '/platform'
      preLoaderRoute: typeof PlatformRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/platform/': {
      id: '/platform/'
      path: '/'
      fullPath: '/platform/'
      preLoaderRoute: typeof PlatformIndexRouteImport
      parentRoute: typeof PlatformRouteRoute
    }
    '/platform/video-generation': {
      id: '/platform/video-generation'
      path: '/video-generation'
      fullPath: '/platform/video-generation'
      preLoaderRoute: typeof PlatformVideoGenerationRouteImport
      parentRoute: typeof PlatformRouteRoute
    }
    '/platform/ai-trainer': {
      id: '/platform/ai-trainer'
      path: '/ai-trainer'
      fullPath: '/platform/ai-trainer'
      preLoaderRoute: typeof PlatformAiTrainerRouteImport
      parentRoute: typeof PlatformRouteRoute
    }
    '/platform/ai-phone-agent': {
      id: '/platform/ai-phone-agent'
      path: '/ai-phone-agent'
      fullPath: '/platform/ai-phone-agent'
      preLoaderRoute: typeof PlatformAiPhoneAgentRouteImport
      parentRoute: typeof PlatformRouteRoute
    }
    '/industries/utilities': {
      id: '/industries/utilities'
      path: '/industries/utilities'
      fullPath: '/industries/utilities'
      preLoaderRoute: typeof IndustriesUtilitiesRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

interface PlatformRouteRouteChildren {
  PlatformAiPhoneAgentRoute: typeof PlatformAiPhoneAgentRoute
  PlatformAiTrainerRoute: typeof PlatformAiTrainerRoute
  PlatformVideoGenerationRoute: typeof PlatformVideoGenerationRoute
  PlatformIndexRoute: typeof PlatformIndexRoute
}

const PlatformRouteRouteChildren: PlatformRouteRouteChildren = {
  PlatformAiPhoneAgentRoute: PlatformAiPhoneAgentRoute,
  PlatformAiTrainerRoute: PlatformAiTrainerRoute,
  PlatformVideoGenerationRoute: PlatformVideoGenerationRoute,
  PlatformIndexRoute: PlatformIndexRoute,
}

const PlatformRouteRouteWithChildren = PlatformRouteRoute._addFileChildren(
  PlatformRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  PlatformRouteRoute: PlatformRouteRouteWithChildren,
  CompanyRoute: CompanyRoute,
  IntegrationsRoute: IntegrationsRoute,
  PricingRoute: PricingRoute,
  IndustriesUtilitiesRoute: IndustriesUtilitiesRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
