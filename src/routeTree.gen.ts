/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as ProductsRouteImport } from './routes/products'
import { Route as PricingRouteImport } from './routes/pricing'
import { Route as IntegrationsRouteImport } from './routes/integrations'
import { Route as CompanyRouteImport } from './routes/company'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ProductsIndexRouteImport } from './routes/products.index'
import { Route as ProductsVideoGenerationRouteImport } from './routes/products.video-generation'
import { Route as ProductsAiTrainerRouteImport } from './routes/products.ai-trainer'
import { Route as ProductsAiPhoneAgentRouteImport } from './routes/products.ai-phone-agent'

const ProductsRoute = ProductsRouteImport.update({
  id: '/products',
  path: '/products',
  getParentRoute: () => rootRouteImport,
} as any)
const PricingRoute = PricingRouteImport.update({
  id: '/pricing',
  path: '/pricing',
  getParentRoute: () => rootRouteImport,
} as any)
const IntegrationsRoute = IntegrationsRouteImport.update({
  id: '/integrations',
  path: '/integrations',
  getParentRoute: () => rootRouteImport,
} as any)
const CompanyRoute = CompanyRouteImport.update({
  id: '/company',
  path: '/company',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProductsIndexRoute = ProductsIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ProductsRoute,
} as any)
const ProductsVideoGenerationRoute = ProductsVideoGenerationRouteImport.update({
  id: '/video-generation',
  path: '/video-generation',
  getParentRoute: () => ProductsRoute,
} as any)
const ProductsAiTrainerRoute = ProductsAiTrainerRouteImport.update({
  id: '/ai-trainer',
  path: '/ai-trainer',
  getParentRoute: () => ProductsRoute,
} as any)
const ProductsAiPhoneAgentRoute = ProductsAiPhoneAgentRouteImport.update({
  id: '/ai-phone-agent',
  path: '/ai-phone-agent',
  getParentRoute: () => ProductsRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/company': typeof CompanyRoute
  '/integrations': typeof IntegrationsRoute
  '/pricing': typeof PricingRoute
  '/products': typeof ProductsRouteWithChildren
  '/products/ai-phone-agent': typeof ProductsAiPhoneAgentRoute
  '/products/ai-trainer': typeof ProductsAiTrainerRoute
  '/products/video-generation': typeof ProductsVideoGenerationRoute
  '/products/': typeof ProductsIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/company': typeof CompanyRoute
  '/integrations': typeof IntegrationsRoute
  '/pricing': typeof PricingRoute
  '/products/ai-phone-agent': typeof ProductsAiPhoneAgentRoute
  '/products/ai-trainer': typeof ProductsAiTrainerRoute
  '/products/video-generation': typeof ProductsVideoGenerationRoute
  '/products': typeof ProductsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/company': typeof CompanyRoute
  '/integrations': typeof IntegrationsRoute
  '/pricing': typeof PricingRoute
  '/products': typeof ProductsRouteWithChildren
  '/products/ai-phone-agent': typeof ProductsAiPhoneAgentRoute
  '/products/ai-trainer': typeof ProductsAiTrainerRoute
  '/products/video-generation': typeof ProductsVideoGenerationRoute
  '/products/': typeof ProductsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/company'
    | '/integrations'
    | '/pricing'
    | '/products'
    | '/products/ai-phone-agent'
    | '/products/ai-trainer'
    | '/products/video-generation'
    | '/products/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/company'
    | '/integrations'
    | '/pricing'
    | '/products/ai-phone-agent'
    | '/products/ai-trainer'
    | '/products/video-generation'
    | '/products'
  id:
    | '__root__'
    | '/'
    | '/company'
    | '/integrations'
    | '/pricing'
    | '/products'
    | '/products/ai-phone-agent'
    | '/products/ai-trainer'
    | '/products/video-generation'
    | '/products/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CompanyRoute: typeof CompanyRoute
  IntegrationsRoute: typeof IntegrationsRoute
  PricingRoute: typeof PricingRoute
  ProductsRoute: typeof ProductsRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/products': {
      id: '/products'
      path: '/products'
      fullPath: '/products'
      preLoaderRoute: typeof ProductsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/pricing': {
      id: '/pricing'
      path: '/pricing'
      fullPath: '/pricing'
      preLoaderRoute: typeof PricingRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/integrations': {
      id: '/integrations'
      path: '/integrations'
      fullPath: '/integrations'
      preLoaderRoute: typeof IntegrationsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/company': {
      id: '/company'
      path: '/company'
      fullPath: '/company'
      preLoaderRoute: typeof CompanyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/products/': {
      id: '/products/'
      path: '/'
      fullPath: '/products/'
      preLoaderRoute: typeof ProductsIndexRouteImport
      parentRoute: typeof ProductsRoute
    }
    '/products/video-generation': {
      id: '/products/video-generation'
      path: '/video-generation'
      fullPath: '/products/video-generation'
      preLoaderRoute: typeof ProductsVideoGenerationRouteImport
      parentRoute: typeof ProductsRoute
    }
    '/products/ai-trainer': {
      id: '/products/ai-trainer'
      path: '/ai-trainer'
      fullPath: '/products/ai-trainer'
      preLoaderRoute: typeof ProductsAiTrainerRouteImport
      parentRoute: typeof ProductsRoute
    }
    '/products/ai-phone-agent': {
      id: '/products/ai-phone-agent'
      path: '/ai-phone-agent'
      fullPath: '/products/ai-phone-agent'
      preLoaderRoute: typeof ProductsAiPhoneAgentRouteImport
      parentRoute: typeof ProductsRoute
    }
  }
}

interface ProductsRouteChildren {
  ProductsAiPhoneAgentRoute: typeof ProductsAiPhoneAgentRoute
  ProductsAiTrainerRoute: typeof ProductsAiTrainerRoute
  ProductsVideoGenerationRoute: typeof ProductsVideoGenerationRoute
  ProductsIndexRoute: typeof ProductsIndexRoute
}

const ProductsRouteChildren: ProductsRouteChildren = {
  ProductsAiPhoneAgentRoute: ProductsAiPhoneAgentRoute,
  ProductsAiTrainerRoute: ProductsAiTrainerRoute,
  ProductsVideoGenerationRoute: ProductsVideoGenerationRoute,
  ProductsIndexRoute: ProductsIndexRoute,
}

const ProductsRouteWithChildren = ProductsRoute._addFileChildren(
  ProductsRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CompanyRoute: CompanyRoute,
  IntegrationsRoute: IntegrationsRoute,
  PricingRoute: PricingRoute,
  ProductsRoute: ProductsRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
